name: Build ROS2 Packages and Lint Repo

on:
  push:
    branches: [ "main" ]
    paths:
      - 'src/**'
  pull_request:
    branches: [ "main" ]
    paths:
      - 'src/**'

defaults:
  run:
    shell: bash

jobs:
  build-and-lint-cpp:
    runs-on: ubuntu-22.04
    container:
      image: ualbertaformula/f1tenth
      options: --user root
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Build Packages
        run: |
          echo -e "\nsource ./scripts/formula_bashrc.sh" >> ~/.bashrc
          source ~/.bashrc
          rc_build
      # NOTE: don't want to waste action minutes and rebuild everything for
      # compilation database in a separate job, so doing linting and build in same job
      - name: lint cpp code using clang-tidy and clang-format
        uses: cpp-linter/cpp-linter-action@v2
        id: linter
        if: ${{ success() }} # only run linting if build was successful
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          style: 'file'  # use .clang-format file
          tidy-checks: '' # use .clang-tidy config file.
          database: './build/'
          thread-comments: 'update'
          no-lgtm: false
          version: '18'
      # we need this fail check since cpp-linter always succeeds even if checks fail
      - name: Check fail
        if: steps.linter.outputs.checks-failed > 0
        run: exit 1
  lint-python:
    runs-on: ubuntu-22.04
    container:
      image: ualbertaformula/f1tenth
      options: --user root
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # super-linter needs the full git history to get the
          # list of files that changed across commits
          fetch-depth: 0

      - name: Lint python code and check formatting
        uses: super-linter/super-linter/slim@v6.8.0
        env:
          # To report GitHub Actions status checks
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ENABLE_GITHUB_ACTIONS_STEP_SUMMARY: true
          # FILTER_REGEX_INCLUDE: .*src/.* # only analyze source files
          LINTER_RULES_PATH: .
          VALIDATE_PYTHON_MYPY: true
          VALIDATE_PYTHON_RUFF: true
          PYTHON_MYPY_CONFIG_FILE: pyproject.toml
          PYTHON_RUFF_CONFIG_FILE: pyproject.toml
